function [methodinfo,structs,enuminfo,ThunkLibName]=ximcm
%XIMCM Create structures to define interfaces found in 'ximcm'.

%This function was generated by loadlibrary.m parser version  on Thu Mar 19 15:43:39 2020
%perl options:'ximcm.i -outfile=ximcm.m -thunkfile=libximc_thunk_pcwin64.c -header=ximcm.h ximc.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libximc_thunk_pcwin64');
% result_t __stdcall set_feedback_settings ( device_t id , const feedback_settings_t * feedback_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_feedback_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'feedback_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_feedback_settings ( device_t id , feedback_settings_t * feedback_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_feedback_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'feedback_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_home_settings ( device_t id , const home_settings_t * home_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_home_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'home_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_home_settings_calb ( device_t id , const home_settings_calb_t * home_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_home_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'home_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_home_settings ( device_t id , home_settings_t * home_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_home_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'home_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_home_settings_calb ( device_t id , home_settings_calb_t * home_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_home_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'home_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_move_settings ( device_t id , const move_settings_t * move_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_move_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'move_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_move_settings_calb ( device_t id , const move_settings_calb_t * move_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_move_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'move_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_move_settings ( device_t id , move_settings_t * move_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_move_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'move_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_move_settings_calb ( device_t id , move_settings_calb_t * move_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_move_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'move_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_engine_settings ( device_t id , const engine_settings_t * engine_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_engine_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_engine_settings_calb ( device_t id , const engine_settings_calb_t * engine_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_engine_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_engine_settings ( device_t id , engine_settings_t * engine_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_engine_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_engine_settings_calb ( device_t id , engine_settings_calb_t * engine_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_engine_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_entype_settings ( device_t id , const entype_settings_t * entype_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_entype_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'entype_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_entype_settings ( device_t id , entype_settings_t * entype_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_entype_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'entype_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_power_settings ( device_t id , const power_settings_t * power_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_power_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'power_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_power_settings ( device_t id , power_settings_t * power_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_power_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'power_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_secure_settings ( device_t id , const secure_settings_t * secure_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_secure_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'secure_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_secure_settings ( device_t id , secure_settings_t * secure_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_secure_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'secure_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_edges_settings ( device_t id , const edges_settings_t * edges_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_edges_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'edges_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_edges_settings_calb ( device_t id , const edges_settings_calb_t * edges_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_edges_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'edges_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_edges_settings ( device_t id , edges_settings_t * edges_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_edges_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'edges_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_edges_settings_calb ( device_t id , edges_settings_calb_t * edges_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_edges_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'edges_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_pid_settings ( device_t id , const pid_settings_t * pid_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_pid_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'pid_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_pid_settings ( device_t id , pid_settings_t * pid_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_pid_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'pid_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_sync_in_settings ( device_t id , const sync_in_settings_t * sync_in_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_sync_in_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_in_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_sync_in_settings_calb ( device_t id , const sync_in_settings_calb_t * sync_in_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_sync_in_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_in_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_sync_in_settings ( device_t id , sync_in_settings_t * sync_in_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_sync_in_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_in_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_sync_in_settings_calb ( device_t id , sync_in_settings_calb_t * sync_in_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_sync_in_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_in_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_sync_out_settings ( device_t id , const sync_out_settings_t * sync_out_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_sync_out_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_out_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_sync_out_settings_calb ( device_t id , const sync_out_settings_calb_t * sync_out_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_sync_out_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_out_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_sync_out_settings ( device_t id , sync_out_settings_t * sync_out_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_sync_out_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_out_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_sync_out_settings_calb ( device_t id , sync_out_settings_calb_t * sync_out_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_sync_out_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'sync_out_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_extio_settings ( device_t id , const extio_settings_t * extio_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_extio_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'extio_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_extio_settings ( device_t id , extio_settings_t * extio_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_extio_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'extio_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_brake_settings ( device_t id , const brake_settings_t * brake_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_brake_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'brake_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_brake_settings ( device_t id , brake_settings_t * brake_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_brake_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'brake_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_control_settings ( device_t id , const control_settings_t * control_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_control_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'control_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_control_settings_calb ( device_t id , const control_settings_calb_t * control_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_control_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'control_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_control_settings ( device_t id , control_settings_t * control_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_control_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'control_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_control_settings_calb ( device_t id , control_settings_calb_t * control_settings_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_control_settings_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'control_settings_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_joystick_settings ( device_t id , const joystick_settings_t * joystick_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_joystick_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'joystick_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_joystick_settings ( device_t id , joystick_settings_t * joystick_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_joystick_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'joystick_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_ctp_settings ( device_t id , const ctp_settings_t * ctp_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_ctp_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ctp_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_ctp_settings ( device_t id , ctp_settings_t * ctp_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_ctp_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ctp_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_uart_settings ( device_t id , const uart_settings_t * uart_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_uart_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uart_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_uart_settings ( device_t id , uart_settings_t * uart_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_uart_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uart_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_calibration_settings ( device_t id , const calibration_settings_t * calibration_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_calibration_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'calibration_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_calibration_settings ( device_t id , calibration_settings_t * calibration_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_calibration_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'calibration_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_controller_name ( device_t id , const controller_name_t * controller_name ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_controller_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'controller_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_controller_name ( device_t id , controller_name_t * controller_name ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_controller_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'controller_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_nonvolatile_memory ( device_t id , const nonvolatile_memory_t * nonvolatile_memory ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_nonvolatile_memory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'nonvolatile_memory_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_nonvolatile_memory ( device_t id , nonvolatile_memory_t * nonvolatile_memory ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_nonvolatile_memory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'nonvolatile_memory_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_emf_settings ( device_t id , const emf_settings_t * emf_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_emf_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'emf_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_emf_settings ( device_t id , emf_settings_t * emf_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_emf_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'emf_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_engine_advansed_setup ( device_t id , const engine_advansed_setup_t * engine_advansed_setup ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_engine_advansed_setup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_advansed_setup_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_engine_advansed_setup ( device_t id , engine_advansed_setup_t * engine_advansed_setup ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_engine_advansed_setup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'engine_advansed_setup_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_extended_settings ( device_t id , const extended_settings_t * extended_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_extended_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'extended_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_extended_settings ( device_t id , extended_settings_t * extended_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_extended_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'extended_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_stop ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_add_sync_in_action ( device_t id , const command_add_sync_in_action_t * the_command_add_sync_in_action ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='command_add_sync_in_action'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'command_add_sync_in_action_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_add_sync_in_action_calb ( device_t id , const command_add_sync_in_action_calb_t * the_command_add_sync_in_action_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='command_add_sync_in_action_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'command_add_sync_in_action_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_power_off ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_power_off'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_move ( device_t id , int Position , int uPosition ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='command_move'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_move_calb ( device_t id , float Position , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32floatvoidPtrThunk';fcns.name{fcnNum}='command_move_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_movr ( device_t id , int DeltaPosition , int uDeltaPosition ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='command_movr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_movr_calb ( device_t id , float DeltaPosition , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32floatvoidPtrThunk';fcns.name{fcnNum}='command_movr_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_home ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_home'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_left ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_left'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_right ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_right'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_loft ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_loft'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_sstp ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_sstp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall get_position ( device_t id , get_position_t * the_get_position ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_position'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'get_position_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_position_calb ( device_t id , get_position_calb_t * the_get_position_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_position_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'get_position_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_position ( device_t id , const set_position_t * the_set_position ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_position'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'set_position_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_position_calb ( device_t id , const set_position_calb_t * the_set_position_calb , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='set_position_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'set_position_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_zero ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_zero'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_save_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_save_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_read_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_read_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_save_robust_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_save_robust_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_read_robust_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_read_robust_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_eesave_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_eesave_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_eeread_settings ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_eeread_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_start_measurements ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_start_measurements'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall get_measurements ( device_t id , measurements_t * measurements ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_measurements'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'measurements_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_chart_data ( device_t id , chart_data_t * chart_data ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_chart_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'chart_data_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_serial_number ( device_t id , unsigned int * SerialNumber ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_serial_number'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall get_firmware_version ( device_t id , unsigned int * Major , unsigned int * Minor , unsigned int * Release ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_firmware_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall service_command_updf ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='service_command_updf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall set_serial_number ( device_t id , const serial_number_t * serial_number ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_serial_number'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'serial_number_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_analog_data ( device_t id , analog_data_t * analog_data ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_analog_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'analog_data_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_debug_read ( device_t id , debug_read_t * debug_read ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_debug_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'debug_read_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_debug_write ( device_t id , const debug_write_t * debug_write ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_debug_write'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'debug_write_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_stage_name ( device_t id , const stage_name_t * stage_name ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_stage_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_stage_name ( device_t id , stage_name_t * stage_name ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_stage_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_stage_information ( device_t id , const stage_information_t * stage_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_stage_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_stage_information ( device_t id , stage_information_t * stage_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_stage_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_stage_settings ( device_t id , const stage_settings_t * stage_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_stage_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_stage_settings ( device_t id , stage_settings_t * stage_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_stage_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'stage_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_motor_information ( device_t id , const motor_information_t * motor_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_motor_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'motor_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_motor_information ( device_t id , motor_information_t * motor_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_motor_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'motor_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_motor_settings ( device_t id , const motor_settings_t * motor_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_motor_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'motor_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_motor_settings ( device_t id , motor_settings_t * motor_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_motor_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'motor_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_encoder_information ( device_t id , const encoder_information_t * encoder_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_encoder_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'encoder_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_encoder_information ( device_t id , encoder_information_t * encoder_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_encoder_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'encoder_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_encoder_settings ( device_t id , const encoder_settings_t * encoder_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_encoder_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'encoder_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_encoder_settings ( device_t id , encoder_settings_t * encoder_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_encoder_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'encoder_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_hallsensor_information ( device_t id , const hallsensor_information_t * hallsensor_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_hallsensor_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'hallsensor_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_hallsensor_information ( device_t id , hallsensor_information_t * hallsensor_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_hallsensor_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'hallsensor_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_hallsensor_settings ( device_t id , const hallsensor_settings_t * hallsensor_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_hallsensor_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'hallsensor_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_hallsensor_settings ( device_t id , hallsensor_settings_t * hallsensor_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_hallsensor_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'hallsensor_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_gear_information ( device_t id , const gear_information_t * gear_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_gear_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'gear_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_gear_information ( device_t id , gear_information_t * gear_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_gear_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'gear_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_gear_settings ( device_t id , const gear_settings_t * gear_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_gear_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'gear_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_gear_settings ( device_t id , gear_settings_t * gear_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_gear_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'gear_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall set_accessories_settings ( device_t id , const accessories_settings_t * accessories_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='set_accessories_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'accessories_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_accessories_settings ( device_t id , accessories_settings_t * accessories_settings ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_accessories_settings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'accessories_settings_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_bootloader_version ( device_t id , unsigned int * Major , unsigned int * Minor , unsigned int * Release ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='get_bootloader_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall get_init_random ( device_t id , init_random_t * init_random ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_init_random'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'init_random_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_globally_unique_identifier ( device_t id , globally_unique_identifier_t * globally_unique_identifier ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_globally_unique_identifier'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'globally_unique_identifier_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_change_motor ( device_t id , const command_change_motor_t * the_command_change_motor ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='command_change_motor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'command_change_motor_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall goto_firmware ( device_t id , uint8_t * ret ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='goto_firmware'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall has_firmware ( const char * uri , uint8_t * ret ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='has_firmware'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall command_update_firmware ( const char * uri , const uint8_t * data , uint32_t data_size ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtruint32Thunk';fcns.name{fcnNum}='command_update_firmware'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr', 'uint32'};fcnNum=fcnNum+1;
% result_t __stdcall write_key ( const char * uri , uint8_t * key ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='write_key'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall command_reset ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_reset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% result_t __stdcall command_clear_fram ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_clear_fram'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% device_t __stdcall open_device ( const char * uri ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='open_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% result_t __stdcall close_device ( device_t * id ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='close_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall load_correction_table ( device_t * id , const char * namefile ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='load_correction_table'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% result_t __stdcall probe_device ( const char * uri ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='probe_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% result_t __stdcall set_bindy_key ( const char * keyfilepath ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='set_bindy_key'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% device_enumeration_t __stdcall enumerate_devices ( int enumerate_flags , const char * hints ); 
fcns.thunkname{fcnNum}='uint64int32cstringThunk';fcns.name{fcnNum}='enumerate_devices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% result_t __stdcall free_enumerate_devices ( device_enumeration_t device_enumeration ); 
fcns.thunkname{fcnNum}='int32uint64Thunk';fcns.name{fcnNum}='free_enumerate_devices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int __stdcall get_device_count ( device_enumeration_t device_enumeration ); 
fcns.thunkname{fcnNum}='int32uint64Thunk';fcns.name{fcnNum}='get_device_count'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% pchar __stdcall get_device_name ( device_enumeration_t device_enumeration , int device_index ); 
fcns.thunkname{fcnNum}='cstringuint64int32Thunk';fcns.name{fcnNum}='get_device_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint64', 'int32'};fcnNum=fcnNum+1;
% result_t __stdcall get_enumerate_device_serial ( device_enumeration_t device_enumeration , int device_index , uint32_t * serial ); 
fcns.thunkname{fcnNum}='int32uint64int32voidPtrThunk';fcns.name{fcnNum}='get_enumerate_device_serial'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% result_t __stdcall get_enumerate_device_information ( device_enumeration_t device_enumeration , int device_index , device_information_t * device_information ); 
fcns.thunkname{fcnNum}='int32uint64int32voidPtrThunk';fcns.name{fcnNum}='get_enumerate_device_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64', 'int32', 'device_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_enumerate_device_controller_name ( device_enumeration_t device_enumeration , int device_index , controller_name_t * controller_name ); 
fcns.thunkname{fcnNum}='int32uint64int32voidPtrThunk';fcns.name{fcnNum}='get_enumerate_device_controller_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64', 'int32', 'controller_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_enumerate_device_stage_name ( device_enumeration_t device_enumeration , int device_index , stage_name_t * stage_name ); 
fcns.thunkname{fcnNum}='int32uint64int32voidPtrThunk';fcns.name{fcnNum}='get_enumerate_device_stage_name'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64', 'int32', 'stage_name_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_enumerate_device_network_information ( device_enumeration_t device_enumeration , int device_index , device_network_information_t * device_network_information ); 
fcns.thunkname{fcnNum}='int32uint64int32voidPtrThunk';fcns.name{fcnNum}='get_enumerate_device_network_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint64', 'int32', 'device_network_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall reset_locks (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='reset_locks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% result_t __stdcall ximc_fix_usbser_sys ( const char * device_uri ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ximc_fix_usbser_sys'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void __stdcall msec_sleep ( unsigned int msec ); 
fcns.thunkname{fcnNum}='voiduint32Thunk';fcns.name{fcnNum}='msec_sleep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% void __stdcall ximc_version ( char * version ); 
fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='ximc_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% result_t __stdcall get_status ( device_t id , status_t * status ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_status'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'status_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_status_calb ( device_t id , status_calb_t * status , const calibration_t * calibration ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='get_status_calb'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'status_calb_tPtr', 'calibration_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall get_device_information ( device_t id , device_information_t * device_information ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='get_device_information'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'device_information_tPtr'};fcnNum=fcnNum+1;
% result_t __stdcall command_wait_for_stop ( device_t id , uint32_t refresh_interval_ms ); 
fcns.thunkname{fcnNum}='int32int32uint32Thunk';fcns.name{fcnNum}='command_wait_for_stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32'};fcnNum=fcnNum+1;
% result_t __stdcall command_homezero ( device_t id ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='command_homezero'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
structs.calibration_t.members=struct('A', 'double', 'MicrostepMode', 'uint32');
structs.device_network_information_t.members=struct('ipv4', 'uint32', 'nodename', 'int8#16', 'axis_state', 'uint32', 'locker_username', 'int8#16', 'locker_nodename', 'int8#16', 'locked_time', 'int64');
structs.feedback_settings_t.members=struct('IPS', 'uint32', 'FeedbackType', 'uint32', 'FeedbackFlags', 'uint32', 'CountsPerTurn', 'uint32');
structs.home_settings_t.members=struct('FastHome', 'uint32', 'uFastHome', 'uint32', 'SlowHome', 'uint32', 'uSlowHome', 'uint32', 'HomeDelta', 'int32', 'uHomeDelta', 'int32', 'HomeFlags', 'uint32');
structs.home_settings_calb_t.members=struct('FastHome', 'single', 'SlowHome', 'single', 'HomeDelta', 'single', 'HomeFlags', 'uint32');
structs.move_settings_t.members=struct('Speed', 'uint32', 'uSpeed', 'uint32', 'Accel', 'uint32', 'Decel', 'uint32', 'AntiplaySpeed', 'uint32', 'uAntiplaySpeed', 'uint32');
structs.move_settings_calb_t.members=struct('Speed', 'single', 'Accel', 'single', 'Decel', 'single', 'AntiplaySpeed', 'single');
structs.engine_settings_t.members=struct('NomVoltage', 'uint32', 'NomCurrent', 'uint32', 'NomSpeed', 'uint32', 'uNomSpeed', 'uint32', 'EngineFlags', 'uint32', 'Antiplay', 'int32', 'MicrostepMode', 'uint32', 'StepsPerRev', 'uint32');
structs.engine_settings_calb_t.members=struct('NomVoltage', 'uint32', 'NomCurrent', 'uint32', 'NomSpeed', 'single', 'EngineFlags', 'uint32', 'Antiplay', 'single', 'MicrostepMode', 'uint32', 'StepsPerRev', 'uint32');
structs.entype_settings_t.members=struct('EngineType', 'uint32', 'DriverType', 'uint32');
structs.power_settings_t.members=struct('HoldCurrent', 'uint32', 'CurrReductDelay', 'uint32', 'PowerOffDelay', 'uint32', 'CurrentSetTime', 'uint32', 'PowerFlags', 'uint32');
structs.secure_settings_t.members=struct('LowUpwrOff', 'uint32', 'CriticalIpwr', 'uint32', 'CriticalUpwr', 'uint32', 'CriticalT', 'uint32', 'CriticalIusb', 'uint32', 'CriticalUusb', 'uint32', 'MinimumUusb', 'uint32', 'Flags', 'uint32');
structs.edges_settings_t.members=struct('BorderFlags', 'uint32', 'EnderFlags', 'uint32', 'LeftBorder', 'int32', 'uLeftBorder', 'int32', 'RightBorder', 'int32', 'uRightBorder', 'int32');
structs.edges_settings_calb_t.members=struct('BorderFlags', 'uint32', 'EnderFlags', 'uint32', 'LeftBorder', 'single', 'RightBorder', 'single');
structs.pid_settings_t.members=struct('KpU', 'uint32', 'KiU', 'uint32', 'KdU', 'uint32', 'Kpf', 'single', 'Kif', 'single', 'Kdf', 'single');
structs.sync_in_settings_t.members=struct('SyncInFlags', 'uint32', 'ClutterTime', 'uint32', 'Position', 'int32', 'uPosition', 'int32', 'Speed', 'uint32', 'uSpeed', 'uint32');
structs.sync_in_settings_calb_t.members=struct('SyncInFlags', 'uint32', 'ClutterTime', 'uint32', 'Position', 'single', 'Speed', 'single');
structs.sync_out_settings_t.members=struct('SyncOutFlags', 'uint32', 'SyncOutPulseSteps', 'uint32', 'SyncOutPeriod', 'uint32', 'Accuracy', 'uint32', 'uAccuracy', 'uint32');
structs.sync_out_settings_calb_t.members=struct('SyncOutFlags', 'uint32', 'SyncOutPulseSteps', 'uint32', 'SyncOutPeriod', 'uint32', 'Accuracy', 'single');
structs.extio_settings_t.members=struct('EXTIOSetupFlags', 'uint32', 'EXTIOModeFlags', 'uint32');
structs.brake_settings_t.members=struct('t1', 'uint32', 't2', 'uint32', 't3', 'uint32', 't4', 'uint32', 'BrakeFlags', 'uint32');
structs.control_settings_t.members=struct('MaxSpeed', 'uint32#10', 'uMaxSpeed', 'uint32#10', 'Timeout', 'uint32#9', 'MaxClickTime', 'uint32', 'Flags', 'uint32', 'DeltaPosition', 'int32', 'uDeltaPosition', 'int32');
structs.control_settings_calb_t.members=struct('MaxSpeed', 'single#10', 'Timeout', 'uint32#9', 'MaxClickTime', 'uint32', 'Flags', 'uint32', 'DeltaPosition', 'single');
structs.joystick_settings_t.members=struct('JoyLowEnd', 'uint32', 'JoyCenter', 'uint32', 'JoyHighEnd', 'uint32', 'ExpFactor', 'uint32', 'DeadZone', 'uint32', 'JoyFlags', 'uint32');
structs.ctp_settings_t.members=struct('CTPMinError', 'uint32', 'CTPFlags', 'uint32');
structs.uart_settings_t.members=struct('Speed', 'uint32', 'UARTSetupFlags', 'uint32');
structs.calibration_settings_t.members=struct('CSS1_A', 'single', 'CSS1_B', 'single', 'CSS2_A', 'single', 'CSS2_B', 'single', 'FullCurrent_A', 'single', 'FullCurrent_B', 'single');
structs.controller_name_t.members=struct('ControllerName', 'int8#17', 'CtrlFlags', 'uint32');
structs.nonvolatile_memory_t.members=struct('UserData', 'uint32#7');
structs.emf_settings_t.members=struct('L', 'single', 'R', 'single', 'Km', 'single', 'BackEMFFlags', 'uint32');
structs.engine_advansed_setup_t.members=struct('stepcloseloop_Kw', 'uint32', 'stepcloseloop_Kp_low', 'uint32', 'stepcloseloop_Kp_high', 'uint32');
structs.extended_settings_t.members=struct('Param1', 'uint32');
structs.command_add_sync_in_action_t.members=struct('Position', 'int32', 'uPosition', 'int32', 'Time', 'uint32');
structs.command_add_sync_in_action_calb_t.members=struct('Position', 'single', 'Time', 'uint32');
structs.get_position_t.members=struct('Position', 'int32', 'uPosition', 'int32', 'EncPosition', 'int64');
structs.get_position_calb_t.members=struct('Position', 'single', 'EncPosition', 'int64');
structs.set_position_t.members=struct('Position', 'int32', 'uPosition', 'int32', 'EncPosition', 'int64', 'PosFlags', 'uint32');
structs.set_position_calb_t.members=struct('Position', 'single', 'EncPosition', 'int64', 'PosFlags', 'uint32');
structs.status_t.members=struct('MoveSts', 'uint32', 'MvCmdSts', 'uint32', 'PWRSts', 'uint32', 'EncSts', 'uint32', 'WindSts', 'uint32', 'CurPosition', 'int32', 'uCurPosition', 'int32', 'EncPosition', 'int64', 'CurSpeed', 'int32', 'uCurSpeed', 'int32', 'Ipwr', 'int32', 'Upwr', 'int32', 'Iusb', 'int32', 'Uusb', 'int32', 'CurT', 'int32', 'Flags', 'uint32', 'GPIOFlags', 'uint32', 'CmdBufFreeSpace', 'uint32');
structs.status_calb_t.members=struct('MoveSts', 'uint32', 'MvCmdSts', 'uint32', 'PWRSts', 'uint32', 'EncSts', 'uint32', 'WindSts', 'uint32', 'CurPosition', 'single', 'EncPosition', 'int64', 'CurSpeed', 'single', 'Ipwr', 'int32', 'Upwr', 'int32', 'Iusb', 'int32', 'Uusb', 'int32', 'CurT', 'int32', 'Flags', 'uint32', 'GPIOFlags', 'uint32', 'CmdBufFreeSpace', 'uint32');
structs.measurements_t.members=struct('Speed', 'int32#25', 'Error', 'int32#25', 'Length', 'uint32');
structs.chart_data_t.members=struct('WindingVoltageA', 'int32', 'WindingVoltageB', 'int32', 'WindingVoltageC', 'int32', 'WindingCurrentA', 'int32', 'WindingCurrentB', 'int32', 'WindingCurrentC', 'int32', 'Pot', 'uint32', 'Joy', 'uint32', 'DutyCycle', 'int32');
structs.device_information_t.members=struct('Manufacturer', 'int8#5', 'ManufacturerId', 'int8#3', 'ProductDescription', 'int8#9', 'Major', 'uint32', 'Minor', 'uint32', 'Release', 'uint32');
structs.serial_number_t.members=struct('SN', 'uint32', 'Key', 'uint8#32', 'Major', 'uint32', 'Minor', 'uint32', 'Release', 'uint32');
structs.analog_data_t.members=struct('A1Voltage_ADC', 'uint32', 'A2Voltage_ADC', 'uint32', 'B1Voltage_ADC', 'uint32', 'B2Voltage_ADC', 'uint32', 'SupVoltage_ADC', 'uint32', 'ACurrent_ADC', 'uint32', 'BCurrent_ADC', 'uint32', 'FullCurrent_ADC', 'uint32', 'Temp_ADC', 'uint32', 'Joy_ADC', 'uint32', 'Pot_ADC', 'uint32', 'L5_ADC', 'uint32', 'H5_ADC', 'uint32', 'A1Voltage', 'int32', 'A2Voltage', 'int32', 'B1Voltage', 'int32', 'B2Voltage', 'int32', 'SupVoltage', 'int32', 'ACurrent', 'int32', 'BCurrent', 'int32', 'FullCurrent', 'int32', 'Temp', 'int32', 'Joy', 'int32', 'Pot', 'int32', 'L5', 'int32', 'H5', 'int32', 'deprecated', 'uint32', 'R', 'int32', 'L', 'int32');
structs.debug_read_t.members=struct('DebugData', 'uint8#128');
structs.debug_write_t.members=struct('DebugData', 'uint8#128');
structs.stage_name_t.members=struct('PositionerName', 'int8#17');
structs.stage_information_t.members=struct('Manufacturer', 'int8#17', 'PartNumber', 'int8#25');
structs.stage_settings_t.members=struct('LeadScrewPitch', 'single', 'Units', 'int8#9', 'MaxSpeed', 'single', 'TravelRange', 'single', 'SupplyVoltageMin', 'single', 'SupplyVoltageMax', 'single', 'MaxCurrentConsumption', 'single', 'HorizontalLoadCapacity', 'single', 'VerticalLoadCapacity', 'single');
structs.motor_information_t.members=struct('Manufacturer', 'int8#17', 'PartNumber', 'int8#25');
structs.motor_settings_t.members=struct('MotorType', 'uint32', 'ReservedField', 'uint32', 'Poles', 'uint32', 'Phases', 'uint32', 'NominalVoltage', 'single', 'NominalCurrent', 'single', 'NominalSpeed', 'single', 'NominalTorque', 'single', 'NominalPower', 'single', 'WindingResistance', 'single', 'WindingInductance', 'single', 'RotorInertia', 'single', 'StallTorque', 'single', 'DetentTorque', 'single', 'TorqueConstant', 'single', 'SpeedConstant', 'single', 'SpeedTorqueGradient', 'single', 'MechanicalTimeConstant', 'single', 'MaxSpeed', 'single', 'MaxCurrent', 'single', 'MaxCurrentTime', 'single', 'NoLoadCurrent', 'single', 'NoLoadSpeed', 'single');
structs.encoder_information_t.members=struct('Manufacturer', 'int8#17', 'PartNumber', 'int8#25');
structs.encoder_settings_t.members=struct('MaxOperatingFrequency', 'single', 'SupplyVoltageMin', 'single', 'SupplyVoltageMax', 'single', 'MaxCurrentConsumption', 'single', 'PPR', 'uint32', 'EncoderSettings', 'uint32');
structs.hallsensor_information_t.members=struct('Manufacturer', 'int8#17', 'PartNumber', 'int8#25');
structs.hallsensor_settings_t.members=struct('MaxOperatingFrequency', 'single', 'SupplyVoltageMin', 'single', 'SupplyVoltageMax', 'single', 'MaxCurrentConsumption', 'single', 'PPR', 'uint32');
structs.gear_information_t.members=struct('Manufacturer', 'int8#17', 'PartNumber', 'int8#25');
structs.gear_settings_t.members=struct('ReductionIn', 'single', 'ReductionOut', 'single', 'RatedInputTorque', 'single', 'RatedInputSpeed', 'single', 'MaxOutputBacklash', 'single', 'InputInertia', 'single', 'Efficiency', 'single');
structs.accessories_settings_t.members=struct('MagneticBrakeInfo', 'int8#25', 'MBRatedVoltage', 'single', 'MBRatedCurrent', 'single', 'MBTorque', 'single', 'MBSettings', 'uint32', 'TemperatureSensorInfo', 'int8#25', 'TSMin', 'single', 'TSMax', 'single', 'TSGrad', 'single', 'TSSettings', 'uint32', 'LimitSwitchesSettings', 'uint32');
structs.init_random_t.members=struct('key', 'uint8#16');
structs.globally_unique_identifier_t.members=struct('UniqueID0', 'uint32', 'UniqueID1', 'uint32', 'UniqueID2', 'uint32', 'UniqueID3', 'uint32');
structs.command_change_motor_t.members=struct('Motor', 'uint32');
methodinfo=fcns;